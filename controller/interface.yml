
Controller(Controller_Base):
  requirement:
    module:
      - model
    property:
      - x
      - goal_x
      - model.u_shape
      - model.A
      - model.B
    function:
      - model.evaluate_dynamics(x_sub, u_sub, params_sub)
  public:
    function:
      - control = controller.control(dt, x, goal_x, est_params)


PID(Controller_Base):
  requirement:
    module:
      model
    property:
      - [state_x, cartesian_x]
      - [state_goal_x, cartesian_goal_x]
      - model.u_shape
      - model.A
      - model.B
    function:
      - model.evaluate_dynamics(x_sub, u_sub, params_sub)
    property_dependency:
      cartesian_goal_x:
        - cartesian_x
      state_goal_x:
        - state_x

  public:
    function:
      - control = controller.control(dt, x, goal_x, est_params)


Vel_FF(Controller_Base):
  requirement:
    module:
      model
    property:
      - [state_goal_x, cartesian_goal_x]
      - model.u_shape
      - model.A
      - model.B
    function:
      - model.evaluate_dynamics(x_sub, u_sub, params_sub)

  public:
    function:
      - control = controller.control(dt, x, goal_x, est_params)

LQR(Controller_Base):
  requirement:
    module:
      model
    property:
      - [state_x, cartesian_x]
      - [state_goal_x, cartesian_goal_x]
      - model.u_shape
      - model.A
      - model.B
    function:
      - model.evaluate_dynamics(x_sub, u_sub, params_sub)
    property_dependency:
      cartesian_goal_x:
        - cartesian_x
      state_goal_x:
        - state_x

  public:
    function:
      - control = controller.control(dt, x, goal_x, est_params)
