digraph G {
	compound=true rankdir=LR
	controller [color=lightskyblue fillcolor=lightskyblue shape=box style=filled]
	planner [color=lightskyblue fillcolor=lightskyblue shape=box style=filled]
	estimator [color=lightskyblue fillcolor=lightskyblue shape=box style=filled]
	model [color=lightskyblue fillcolor=lightskyblue shape=box style=filled]
	sensor [color=lightskyblue fillcolor=lightskyblue shape=box style=filled]
	cartesian_goal_x [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	state_est [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	state_x [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"planner.replanning_cycle" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"model.A" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"planner.re_planning(dt, goal, agent_state)" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	cartesian_est [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"evaled = model.evaluate_dynamics(x_sub, u_sub, params_sub)" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	cartesian_sensor_data [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"planner.horizon" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"model.B" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"control = controller.control(dt, x, goal_x, est_params)" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	state_sensor_data [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"model.shape_u" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	cartesian_x [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"evaled = model.evaluate_measurement(x_sub)" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"planner.planning(dt, goal, agent_state)" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"model.dynamics" [color=peachpuff fillcolor=peachpuff shape=box style=filled]
	"model.A" [color=pink fillcolor=pink shape=box style=filled]
	"model.B" [color=pink fillcolor=pink shape=box style=filled]
	"model.shape_u" [color=pink fillcolor=pink shape=box style=filled]
	cartesian_x [color=pink fillcolor=pink shape=box style=filled]
	"model.dynamics" [color=pink fillcolor=pink shape=box style=filled]
	cartesian_goal_x [color=pink fillcolor=pink shape=box style=filled]
	state_x [color=pink fillcolor=pink shape=box style=filled]
	cartesian_x -> controller [color=gray50]
	cartesian_goal_x -> controller [color=gray50]
	"model.shape_u" -> controller [color=gray50]
	"model.A" -> controller [color=gray50]
	"model.B" -> controller [color=gray50]
	"evaled = model.evaluate_dynamics(x_sub, u_sub, params_sub)" -> controller [color=gray50]
	"evaled = model.evaluate_dynamics(x_sub, u_sub, params_sub)" -> planner [color=gray50]
	controller -> "control = controller.control(dt, x, goal_x, est_params)" [color=gray50]
	model -> "evaled = model.evaluate_dynamics(x_sub, u_sub, params_sub)" [color=gray50]
	model -> "evaled = model.evaluate_measurement(x_sub)" [color=gray50]
	state_sensor_data -> estimator [color=gray50]
	cartesian_sensor_data -> estimator [color=gray50]
	"model.dynamics" -> estimator [color=gray50]
	estimator -> cartesian_est [color=gray50]
	estimator -> state_est [color=gray50]
	sensor -> state_sensor_data [color=gray50]
	sensor -> cartesian_sensor_data [color=gray50]
	cartesian_est -> planner [color=gray50]
	state_est -> planner [color=gray50]
	planner -> state_x [color=gray50]
	planner -> cartesian_goal_x [color=gray50]
	planner -> "planner.horizon" [color=gray50]
	planner -> "planner.replanning_cycle" [color=gray50]
	planner -> "planner.planning(dt, goal, agent_state)" [color=gray50]
	planner -> "planner.re_planning(dt, goal, agent_state)" [color=gray50]
	cartesian_x -> cartesian_goal_x [color=gray80 weight=100]
	cartesian_goal_x -> cartesian_x [color=gray80 weight=100]
	state_x -> state_goal_x [color=gray80 weight=100]
	state_goal_x -> state_x [color=gray80 weight=100]
	model -> sensor [style=invis weight=1000]
	sensor -> estimator [style=invis weight=1000]
	estimator -> planner [style=invis weight=1000]
	planner -> controller [style=invis weight=1000]
	"evaled = model.evaluate_dynamics(x_sub, u_sub, params_sub)" -> sensor [style=invis]
	"evaled = model.evaluate_measurement(x_sub)" -> sensor [style=invis]
	state_sensor_data -> estimator [style=invis]
	cartesian_sensor_data -> estimator [style=invis]
	cartesian_est -> planner [style=invis]
	state_est -> planner [style=invis]
	state_x -> controller [style=invis]
	cartesian_goal_x -> controller [style=invis]
	"planner.horizon" -> controller [style=invis]
	"planner.replanning_cycle" -> controller [style=invis]
	"planner.planning(dt, goal, agent_state)" -> controller [style=invis]
	"planner.re_planning(dt, goal, agent_state)" -> controller [style=invis]
	{
		rank=same
		"evaled = model.evaluate_dynamics(x_sub, u_sub, params_sub)"
		"evaled = model.evaluate_measurement(x_sub)"
	}
	{
		rank=same
		state_sensor_data
		cartesian_sensor_data
	}
	{
		rank=same
		cartesian_est
		state_est
	}
	{
		rank=same
		state_x
		cartesian_goal_x
		"planner.horizon"
		"planner.replanning_cycle"
		"planner.planning(dt, goal, agent_state)"
		"planner.re_planning(dt, goal, agent_state)"
	}
	{
		rank=same
		"control = controller.control(dt, x, goal_x, est_params)"
	}
}
